# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Build and Publish Wheel File
# Run this workflow on demand
on:
  push:
    branches:
      - main
    paths:
      - source/streaming/geh_stream/**
      - .github/workflows/build-publish-wheel-file.yml
  workflow_dispatch:

env:
  WHEEL_STORAGE_NAME: 'enrgtwheels'
  WHEEL_STORAGE_ADDRESS: https://enrgtwheels.blob.core.windows.net/wheels/
  WHEEL_CONTAINER_NAME: 'wheels'

jobs:
  wheel_build_publish:
    
    # Name the Job
    name: Build and Publish Wheel File
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    environment:
      name: rg-DataHub-D    

    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.6' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Read Pipeline Configuration
        uses: ./.github/actions/read-pipeline-configuration

      - name: Set Environment Secrets
        run: |  
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.SPN_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_OBJECT_ID=${{ secrets.SPN_OBJECT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.SPN_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SPN_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Azure CLI Install and Login
        uses: ./.github/actions/azure-cli-install-login
      
      - name: Check If Wheel Repository Storage exists
        id: wheel-storage-exists
        run: |
          storage_exists=$(az storage account check-name --name ${{ env.WHEEL_STORAGE_NAME }} | python3 -c "import sys, json; print(not json.load(sys.stdin)['nameAvailable'])")
          echo "::set-output name=wheel-storage-exists::${storage_exists}"

      #Create Wheel Repository Container if needed
      - name: Create Wheel Repository Storage
        run: |
          az storage account create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.WHEEL_STORAGE_NAME }} --sku Standard_LRS --encryption-services blob
          account_key=$(az storage account keys list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --account-name ${{ env.WHEEL_STORAGE_NAME }} --query '[0].value' -o tsv)
          az storage container create --name ${{ env.WHEEL_CONTAINER_NAME }} --account-name ${{ env.WHEEL_STORAGE_NAME }} --account-key $account_key --public-access blob
        if: steps.wheel-storage-exists.outputs.wheel-storage-exists == 'False'

      # Obtain next wheel file version - step 1 of 2
      - name: Obtain Wheel Version File
        id:   wheel-version-file-name
        uses: ./.github/actions/obtain-published-wheel-version-file-name

      # Obtain next wheel file version - step 2 of 2
      - name: Obtain Next Wheel Version
        id:   next-wheel-file-version
        uses: ./.github/actions/obtain-next-wheel-version
        with:
          published_wheel_version_file_url: "${{ env.WHEEL_STORAGE_ADDRESS }}${{ steps.wheel-version-file-name.outputs.filename }}"

      - name: Create Python Wheel for Databricks Jobs
        working-directory: ./source/streaming
        run: |
          echo "${{ steps.next-wheel-file-version.outputs.next_version }}" > VERSION
          pip install wheel
          python setup.py sdist bdist_wheel

      - name: Upload Wheel
        run: |
          version="${{ steps.next-wheel-file-version.outputs.next_version }}"
          account_key=$(az storage account keys list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --account-name ${{ env.WHEEL_STORAGE_NAME }} --query '[0].value' -o tsv)
          az storage blob upload --account-name ${{ env.WHEEL_STORAGE_NAME }} --container-name ${{ env.WHEEL_CONTAINER_NAME }} \
          --name "geh_stream-${version}-py3-none-any.whl" \
          --file "./source/streaming/dist/geh_stream-${version}-py3-none-any.whl" \
          --account-key $account_key

      - name: Update Wheel Version file
        run: |
          account_key=$(az storage account keys list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --account-name ${{ env.WHEEL_STORAGE_NAME }} --query '[0].value' -o tsv)
          az storage blob upload --account-name ${{ env.WHEEL_STORAGE_NAME }} --container-name ${{ env.WHEEL_CONTAINER_NAME }} \
          --name "${{ steps.wheel-version-file-name.outputs.filename }}" \
          --file "./source/streaming/VERSION" \
          --account-key $account_key
